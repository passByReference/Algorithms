1. recursive
fib(n):
    if n <= 2: f = 1
    else f = fib(n - 1) + fib(n - 2)
    return f

exponential running time

2. Memoized DP algorithm
# each time we computed a fib number, we store it into a dictionary.
# then look up in the dictionary for subsequent computations
memo = {}
fib(n):
    if n in memo: return memo[n]
    if n <= 2: f = 1
    else: f = fib(n - 1) + fib(n - 2)
    memo[n] = f
    return f

linear running time
- DP = recursion + memoization
    memoize and reuse solutions to subproblems that help solve the problem

3. Bottom-up DP algorithm
fib = {}
for k in range(1, n + 1):
    if k <= 2: f = 1
    else: f = fib[k - 1] + fib[k - 2]
    fib[k] = f
return fib[n]
# same thing happens in the same order as in the recursion version
# same computation as in memoization
